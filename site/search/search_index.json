{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Basic%20Usage/","text":"How to launch After installation with poetry install , or pip install ./pkg if you have a binary distribution; you can launch Fouine with fouine . Multiple options can be provided: \"\"\" -i / --input -> Path where EWF shall be found. (By default: ./) -o / --output -> Path where extracted artifacts should be saved. (By default: ./Fouined) -c / --config -> Path where config file are to be found. (By default: ./) -v / --verbose -> Wether logging info should be printed in stdout. If not, it is only recorded in logfiles. (By default: False) -l / --logging -> Each 'l' increases the logging level. (By default: 0) -lf / --logfile -> Where to save your logfile. (By default: /tmp/fouine-YEAR_MONTH_DAY:HOUR:MINUTES:SECONDS.log) \"\"\"","title":"Tutorial"},{"location":"Basic%20Usage/#how-to-launch","text":"After installation with poetry install , or pip install ./pkg if you have a binary distribution; you can launch Fouine with fouine . Multiple options can be provided: \"\"\" -i / --input -> Path where EWF shall be found. (By default: ./) -o / --output -> Path where extracted artifacts should be saved. (By default: ./Fouined) -c / --config -> Path where config file are to be found. (By default: ./) -v / --verbose -> Wether logging info should be printed in stdout. If not, it is only recorded in logfiles. (By default: False) -l / --logging -> Each 'l' increases the logging level. (By default: 0) -lf / --logfile -> Where to save your logfile. (By default: /tmp/fouine-YEAR_MONTH_DAY:HOUR:MINUTES:SECONDS.log) \"\"\"","title":"How to launch"},{"location":"Installation/","text":"About Poetry usage Besides the installation of poetry and fouine , there is 3 commands that will be useful for interacting with poetry : poetry shell will launch a shell with the poetry virtual environment activated. exit to quit the poetry shell. poetry run cmd to run a command inside poetry shell without entering poetry shell. For anything else check the official poetry documentation ;) For Users Installation First install Poetry with the following command: . ./installer_poetry/poetry_install.sh To remove it, simply use the script: ./installer_poetry/poetry_uninstall.sh You can now install the project and the required dependencies with poetry install . For Devs Installation First install Poetry with the following command: . ./installer_poetry/poetry_install.sh To remove it, simply use the script: ./installer_poetry/poetry_uninstall.sh You can now install the project and the required dependencies with poetry install . To install optional dependencies with it, use the option --with group . Actually, there is 2 optionnal dependencies groups: docs and dev . Install fouine with the following to have everything needed for contribution at hand: poetry install --with dev,doc You can add a dependend to the project with: poetry add pkg Or to a specific dependencies group with: poetry add pkg -G group Committing When committing for the 1st time after cloning, install pre-commit hookw with pre-commit install They will run automatically before each commit, on staged files. If these tools checks are failing, you won't be able to commit... So correct your style ! You can skip the checks with the option --no-verify when committing. Or run the hooks without committing with pre-commit run --all .","title":"Installation"},{"location":"Installation/#about-poetry-usage","text":"Besides the installation of poetry and fouine , there is 3 commands that will be useful for interacting with poetry : poetry shell will launch a shell with the poetry virtual environment activated. exit to quit the poetry shell. poetry run cmd to run a command inside poetry shell without entering poetry shell. For anything else check the official poetry documentation ;)","title":"About Poetry usage"},{"location":"Installation/#for-users","text":"","title":"For Users"},{"location":"Installation/#installation","text":"First install Poetry with the following command: . ./installer_poetry/poetry_install.sh To remove it, simply use the script: ./installer_poetry/poetry_uninstall.sh You can now install the project and the required dependencies with poetry install .","title":"Installation"},{"location":"Installation/#for-devs","text":"","title":"For Devs"},{"location":"Installation/#installation_1","text":"First install Poetry with the following command: . ./installer_poetry/poetry_install.sh To remove it, simply use the script: ./installer_poetry/poetry_uninstall.sh You can now install the project and the required dependencies with poetry install . To install optional dependencies with it, use the option --with group . Actually, there is 2 optionnal dependencies groups: docs and dev . Install fouine with the following to have everything needed for contribution at hand: poetry install --with dev,doc You can add a dependend to the project with: poetry add pkg Or to a specific dependencies group with: poetry add pkg -G group","title":"Installation"},{"location":"Installation/#committing","text":"When committing for the 1st time after cloning, install pre-commit hookw with pre-commit install They will run automatically before each commit, on staged files. If these tools checks are failing, you won't be able to commit... So correct your style ! You can skip the checks with the option --no-verify when committing. Or run the hooks without committing with pre-commit run --all .","title":"Committing"}]}